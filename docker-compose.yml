networks:
  default:
    name: bard

services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.11.2
    ports:
      - "5672:5672"
    restart: always
    #wait for rabbit mq to be fully started up
    healthcheck:
      test: ["CMD", "rabbitmqctl", "await_startup"]
      interval: 15s
      timeout: 10s
      retries: 10
  clickhouse:
    container_name: clickhouse
    image: clickhouse/clickhouse-server
    #ch needs rabbit mq operational to create a rabbit mq table
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8123:8123"
    #ping clickhouse as a health check
    healthcheck:
      test: ["CMD", "wget", "localhost:8123/ping"]
      interval: 15s
      timeout: 10s
      retries: 10
    restart: always
    volumes:
      - ch:/var/lib/clickhouse/
      - ch_logs:/val/log/clickhouse-server/
      - ./clickhouse_initialization_scripts:/docker-entrypoint-initdb.d
      - ./clickhouse_server_config/config.xml:/etc/clickhouse-server/config.xml
  postgres:
    container_name: postgres
    image: postgres:15
    volumes:
      - ./postgres_initialization_scripts:/docker-entrypoint-initdb.d
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    restart: always
  agent-api:
    container_name: agent-api
    # totoggle
    image: bardrr/agent-api
    #build: ../agent-api/app
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=user
      - PGPASSWORD=password
      - PGDATABASE=bard
      - RABBITMQ_HOST=rabbitmq
      - CLICKHOUSE_HOST=clickhouse
      - ACCESS_TOKEN_SECRET='26f08d4369fecdcef0d05efd2732dab2dad7aa2357df5af39b180052fa151c9140d5f2e6cb684bf5c21cee7d448074a3b7606cad191ebb977af4d4221c71cd75d6'
    ports:
      - "3001:3001"
    restart: always
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    #command: npm run dev
  session_ender:
    container_name: session_ender
    # totoggle
    image: bardrr/session_ender:latest
    #build: ../session_ender
    depends_on:
      postgres:
        condition: service_started
      clickhouse:
        condition: service_healthy
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=user
      - PGPASSWORD=password
      - PGDATABASE=bard
      - CLICKHOUSE_HOST=clickhouse
    restart: always
    # totoggle
    #command: npm run dev
  replayer:
    container_name: replayer
    image: bardrr/replayer:latest
    depends_on:
      postgres:
        condition: service_started
      clickhouse:
        condition: service_healthy
    restart: always
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGUSER=user
      - PGPASSWORD=password
      - PGDATABASE=bard
    ports:
      - "3003:3003"
volumes:
  ch:
  ch_logs:
  pgdata:
